AWSTemplateFormatVersion: '2010-09-09'
Description: Lambda function to stop EC2 instances on a schedule

Parameters:
  LambdaFunctionName:
    Type: String
    Default: EC2ShutdownLambda
    Description: Name for the Lambda function

  LambdaCodeBucket:
    Type: String
    Description: S3 bucket where the Lambda deployment package is stored

  LambdaCodeKey:
    Type: String
    Description: S3 key for the Lambda deployment package (e.g., path/to/lambda.zip)

  CreateDynamo:
    Type: String
    AllowedValues: ["true", "false"]
    Default: "true"

  CreateCloudTrailRole:
    Type: String
    AllowedValues: ["true", "false"]
    Default: "true"

  ApiStageName:
    Type: String
    Default: prod
    Description: HTTP API Stage name (use a different value per environment)

Conditions:
  CreateDynamoCond: !Equals [!Ref CreateDynamo, "true"]
  CreateCloudTrailRoleCond: !Equals [!Ref CreateCloudTrailRole, "true"]

Resources:

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${LambdaFunctionName}-Role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCloudTrail_ReadOnlyAccess
      Policies:
        - PolicyName: EC2ShutdownPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeInstances
                  - ec2:StopInstances
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref LambdaFunctionName
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.12
      Timeout: 120
      Code:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: !Ref LambdaCodeKey

  LambdaScheduleRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub "${LambdaFunctionName}-ScheduleRule"
      ScheduleExpression: "cron(0 23 * * ? *)"  # 7 PM EST / 8 PM EDT = 11 PM UTC
      State: ENABLED
      Targets:
        - Arn: !GetAtt LambdaFunction.Arn
          Id: LambdaFunctionTarget

  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt LambdaScheduleRule.Arn

  StoppedInstanceLoggingTable:
    Condition: CreateDynamoCond
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Stopped_Instance_Logging_Table
      AttributeDefinitions:
        - AttributeName: InstanceId
          AttributeType: S
      KeySchema:
        - AttributeName: InstanceId
          KeyType: HASH 
      BillingMode: PROVISIONED
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  DynamoDBWritePolicy:
    Condition: CreateDynamoCond
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: DynamoDBWriteToSpecificTable
      Roles:
        - !Ref LambdaExecutionRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:PutItem
              - dynamodb:UpdateItem
              - dynamodb:BatchWriteItem
              - dynamodb:TransactWriteItems
              - dynamodb:DescribeTable
            Resource:
              - !GetAtt StoppedInstanceLoggingTable.Arn
              - !Sub "${StoppedInstanceLoggingTable.Arn}/index/*"

  HttpApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub "${LambdaFunctionName}-HttpApi"
      ProtocolType: HTTP

  HttpApiIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      IntegrationType: AWS_PROXY
      PayloadFormatVersion: "2.0"
      IntegrationUri: !GetAtt LambdaFunction.Arn

  HttpApiDefaultRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: "$default"
      Target: !Sub "integrations/${HttpApiIntegration}"

  HttpApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref HttpApi
      StageName: !Ref ApiStageName
      AutoDeploy: true

  PermissionForApiToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/*/*/*"
    
